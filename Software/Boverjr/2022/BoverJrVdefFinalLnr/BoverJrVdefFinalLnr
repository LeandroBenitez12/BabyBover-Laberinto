#include <PID.h>
#include <Drv8833EnginesController.h>
#include <ButtonLab.h>
#include <QRE1113.h>
#include <SharpLab.h>
#include "BluetoothSerial.h"

//Variables y constantes para el debug
#define DEBUG_STATUS 1
#define DEBUG_SENSORS 1
#define DEBUG_PID 1
#define TICK_DEBUG 400
unsigned long currentTimeDebug = 0;
unsigned long currentTimeDebugSensors = 0;
unsigned long currentTimeDebugPID = 0;
unsigned long currentTimeLedOn = 0;
unsigned long currentTimeLedOff = 0;
#define TICK_LED_ON 200
#define TICK_LED_OFF 200

//Variables y constantes para los motores
#define PIN_ENGINE_MR1 23
#define PIN_ENGINE_MR2 22
#define PIN_ENGINE_ML1 19
#define PIN_ENGINE_ML2 18
int speedRight = 80;
int speedLeft = 80;
int averageSpeed = 80;
int speedTurn = 80;

// Button
#define PIN_BUTTON_START 39
enum button
{
  NONE,
  SWITCH_PRIORITY,
  START
};
//Sensor final
#define PIN_END_SENSOR 32

//Variables y constantes de los sensores de distancia
#define PIN_SHARP_RIGHT 34
#define PIN_SHARP_LEFT 27
#define PIN_SHARP_FRONT 35
float frontDistance;
float rightDistance;
float leftDistance;
#define MAX_FRONT_DISTANCE 20
#define MAX_SIDE_DISTANCE 12
#define MAX_DISTANCE_ANT_TURN 25

//Variables y constantes para los encoder
int interruptPinRight = 26;
int interruptPinLeft = 21;
volatile long rightCont = 0;
volatile long leftCont = 0;
#define TICK_TURN_RIGHT_90 19
#define TICK_TURN_LEFT_90 20
#define TICK_TURN_180 34
#define TICK_POST_TURN 35
#define TICK_ANT_TURN 27
#define TICK_IGNORE_TURN 40
//Funciones que se van a ejecutar cuando lea la interrupcion del pin de cada encoder
void rightEncRead()
{
    rightCont++;
}

void leftEncRead()
{
    leftCont++;
}

//varibles y constantes PID
double kp = 0.175;
double kd = 0;
double setPoint;
float PID1;
double TICK_PID = 50;

//Configuramos el Serial Bluetooth
#if !defined(CONFIG_BT_ENABLED) || !defined(CONFIG_BLUEDROID_ENABLED)
#error Bluetooth is not enabled! Please run `make menuconfig` to and enable it
#endif
BluetoothSerial SerialBT;
//<---------------------------------------------------------------------------------->//
//Instancio los objetos
EngineController *Bover = new EngineController(PIN_ENGINE_MR1, PIN_ENGINE_MR2, PIN_ENGINE_ML1, PIN_ENGINE_ML2);

Button *start = new Button(PIN_BUTTON_START);

QRE1113 *endSensor = new QRE1113(PIN_END_SENSOR);

Sharp *SharpFront = new Sharp(PIN_SHARP_FRONT);
Sharp *SharpRigh = new Sharp(PIN_SHARP_RIGHT);
Sharp *SharpLeft = new Sharp(PIN_SHARP_LEFT);

Pid *engine = new Pid(kp, kd, setPoint, TICK_PID);
//<---------------------------------------------------------------------------------->//
//Funciones para los diferentes casos de giro
void turnRight()
{
  rightCont = 0;
  leftCont = 0;
  while(rightCont < TICK_TURN_RIGHT_90 || leftCont < TICK_TURN_RIGHT_90)
    Bover->Right(speedTurn, speedTurn);
}

void turnLeft()
{
  rightCont = 0;
  leftCont = 0;
  while(rightCont < TICK_TURN_LEFT_90 || leftCont < TICK_TURN_LEFT_90)
    Bover->Left(speedTurn, speedTurn);
}

void fulTurn()
{
  rightCont = 0;
  leftCont = 0;
  while(rightCont < TICK_TURN_180 || leftCont < TICK_TURN_180)
    Bover->Right(speedTurn, speedTurn);
}

void antTurn()
{
  rightCont = 0;
  leftCont = 0;
  while(rightCont < TICK_ANT_TURN || leftCont < TICK_ANT_TURN)
    Bover->Forward(averageSpeed, averageSpeed);
}

void posTurn()
{
  rightCont = 0;
  leftCont = 0;
  while(rightCont < TICK_POST_TURN || leftCont < TICK_POST_TURN)
    Bover->Forward(averageSpeed, averageSpeed);
}

void ignoreTurn()
{
  rightCont = 0;
  leftCont = 0;
  while(rightCont < TICK_IGNORE_TURN || leftCont < TICK_IGNORE_TURN)
    Bover->Forward(averageSpeed, averageSpeed);
}
//<---------------------------------------------------------------------------------->//
//enum para la maquina de estados principal
enum priority
{
  SELECT_PRIORITY,
  LEFT_PRIORITY,
  RIGHT_PRIORITY
};
int priority = SELECT_PRIORITY;
//<---------------------------------------------------------------------------------->//
enum movement
{
  STANDBY,
  CONTINUE,
  STOP,
  RIGHT_TURN,
  LEFT_TURN,
  FULL_TURN,
  POST_TURN,
  IGNORE_TURN,
  ANT_TURN
};
int movement = STANDBY;
//Maquina de estados para la logica de Movimiento Hacia la Izquierda
void movementLogicLeft()
{
  switch (movement)
  {
  case STANDBY:
  {
    Bover->Stop();
    if (start->GetIsPress())
      movement = CONTINUE;
    break;
  }

  case CONTINUE:
  {
    if (PID1)
    {
      if (PID1 > 30) PID1 = 30;
      if (PID1 < -30) PID1 = -30;

      speedRight = (averageSpeed - (PID1));
      speedLeft = (averageSpeed + (PID1));
    }
    Bover->Forward(speedRight, speedLeft);
    if (frontDistance < MAX_FRONT_DISTANCE) movement = STOP;
    if (leftDistance > MAX_SIDE_DISTANCE && frontDistance > MAX_DISTANCE_ANT_TURN) movement = ANT_TURN;
    else if (rightDistance > MAX_SIDE_DISTANCE && frontDistance > MAX_DISTANCE_ANT_TURN) movement = IGNORE_TURN;
    break;
  }

  case STOP:
  {
    Bover->Stop();
    delay(500);
    if (rightDistance <= MAX_SIDE_DISTANCE && leftDistance > MAX_SIDE_DISTANCE) movement = LEFT_TURN;
    if (rightDistance > MAX_SIDE_DISTANCE && leftDistance > MAX_SIDE_DISTANCE) movement = LEFT_TURN;
    if (rightDistance > MAX_SIDE_DISTANCE && leftDistance <= MAX_SIDE_DISTANCE) movement = RIGHT_TURN;
    if (rightDistance <= MAX_SIDE_DISTANCE && leftDistance <= MAX_SIDE_DISTANCE) movement = FULL_TURN;
    break;
  }

  case RIGHT_TURN:
  {
    turnRight();
    Bover->Stop();
    delay(200);
    movement = POST_TURN;
    break;
  }

  case LEFT_TURN:
  {
    turnLeft();
    Bover->Stop();
    delay(200);
    movement = POST_TURN;
    break;
  }

  case FULL_TURN:
  {
    fulTurn();
    Bover->Stop();
    delay(200);
    movement = POST_TURN;
    break;
  }

  case POST_TURN:
  {
    posTurn();
    Bover->Stop();
    delay(200);
    movement = CONTINUE;
    break;
  }

  case ANT_TURN:
  {
    antTurn();
    Bover->Stop();
    delay(200);
    movement = LEFT_TURN;
    break;
  }

  case IGNORE_TURN:
  {
    ignoreTurn();
    Bover->Stop();
    delay(200);
    movement = CONTINUE;
    break;
  }
}
}
//<---------------------------------------------------------------------------------->//
//Maquina de estados para el Movimiento hacia la derecha
void movementLogicRight()
{
  switch (movement)
  {
  case STANDBY:
  {
    Bover->Stop();
    if (start->GetIsPress())
      movement = CONTINUE;
    break;
  }

  case CONTINUE:
  {
    if (PID1)
    {
      if (PID1 > 30) PID1 = 30;
      if (PID1 < -30) PID1 = -30;

      speedRight = (averageSpeed - (PID1));
      speedLeft = (averageSpeed + (PID1));
    }
    Bover->Forward(speedRight, speedLeft);
    if (frontDistance < MAX_FRONT_DISTANCE) movement = STOP;
    if (rightDistance > MAX_SIDE_DISTANCE && frontDistance > MAX_DISTANCE_ANT_TURN) movement = ANT_TURN;
    else if (leftDistance > MAX_SIDE_DISTANCE && frontDistance > MAX_DISTANCE_ANT_TURN) movement = IGNORE_TURN;
    break;
  }

  case STOP:
  {
    Bover->Stop();
    delay(500);
    if (rightDistance > MAX_SIDE_DISTANCE && leftDistance <= MAX_SIDE_DISTANCE) movement = RIGHT_TURN;
    if (rightDistance > MAX_SIDE_DISTANCE && leftDistance > MAX_SIDE_DISTANCE) movement = RIGHT_TURN;
    if (rightDistance <= MAX_SIDE_DISTANCE && leftDistance > MAX_SIDE_DISTANCE) movement = LEFT_TURN;
    if (rightDistance <= MAX_SIDE_DISTANCE && leftDistance <= MAX_SIDE_DISTANCE) movement = FULL_TURN;
    break;
  }

  case RIGHT_TURN:
  {
    turnRight();
    Bover->Stop();
    delay(200);
    movement = POST_TURN;
    break;
  }

  case LEFT_TURN:
  {
    turnLeft();
    Bover->Stop();
    delay(200);
    movement = POST_TURN;
    break;
  }

  case FULL_TURN:
  {
    fulTurn();
    Bover->Stop();
    delay(200);
    movement = POST_TURN;
    break;
  }

  case POST_TURN:
  {
    posTurn();
    Bover->Stop();
    delay(200);
    movement = CONTINUE;
    break;
  }

  case ANT_TURN:
  {
    antTurn();
    Bover->Stop();
    delay(200);
    movement = RIGHT_TURN;
    break;
  }

  case IGNORE_TURN:
  {
    ignoreTurn();
    Bover->Stop();
    delay(200);
    movement = CONTINUE;
    break;
  }
}
}
//<---------------------------------------------------------------------------------->//
enum selectTurnPriority 
{
  SELECT_LEFT_PRIORITY,
  SELECT_RIGHT_PRIORITY
};
int selectTurnPriority = SELECT_LEFT_PRIORITY;

void SelectPriority()
{
  switch (selectTurnPriority)
  {
    case SELECT_LEFT_PRIORITY:
    {
      digitalWrite(2,HIGH);
      if (start->GetIsPress() == SWITCH_PRIORITY) selectTurnPriority = SELECT_RIGHT_PRIORITY;
      if (start->GetIsPress() == START) priority = LEFT_PRIORITY;
      break;
    }

    case SELECT_RIGHT_PRIORITY:
    {
      if(millis() > currentTimeLedOn + TICK_LED_ON)
      {
        digitalWrite(2,HIGH);
        currentTimeLedOn = millis();
      }
      if(millis() > currentTimeLedOff + TICK_LED_OFF)
      {
        digitalWrite(2,LOW);
        currentTimeLedOff = millis();
      }
      if (start->GetIsPress() == SWITCH_PRIORITY) selectTurnPriority = SELECT_LEFT_PRIORITY;
      if (start->GetIsPress() == START) priority = RIGHT_PRIORITY;
      break;
    }
  }
}
//<---------------------------------------------------------------------------------->//
//maquina de estados principal
void MovementLogic()
{
  switch (priority)
  {
    case SELECT_PRIORITY:
    {
      SelectPriority();
      break;
    }

    case LEFT_PRIORITY:
    {
      movementLogicLeft();
      break;
    }

    case RIGHT_PRIORITY:
    {
      movementLogicRight();
      break;
    }
  }
}
//<---------------------------------------------------------------------------------->//
//Funciones para debugear en el serial Bloutooth
void printSensors()
{
  if (millis() > currentTimeDebugSensors + TICK_DEBUG)
  {
    currentTimeDebugSensors = millis();
    SerialBT.print("frontDistance: ");
    SerialBT.print(frontDistance);
    SerialBT.print(" || rightDistance: ");
    SerialBT.print(rightDistance);
    SerialBT.print(" || leftDistance: ");
    SerialBT.println(leftDistance);
  }
}

void printPID()
{
  if (millis() > currentTimeDebugPID + TICK_DEBUG)
  {
    currentTimeDebugPID = millis();
    SerialBT.print("PID: ");
    SerialBT.println(PID1);
    SerialBT.print("speedRight: ");
    SerialBT.print(speedRight);
    SerialBT.print(" || speedLeft: ");
    SerialBT.println(speedLeft);
  }
}

void printStatus()
{
  if (millis() > currentTimeDebug + TICK_DEBUG)
  {
    currentTimeDebug = millis();
    String state = "";
    switch (movement)
    {
      case STANDBY: state = "STANDBY";
      break;
      case CONTINUE: state = "CONTINUE";
      break;
      case STOP: state = state = "STOP"; 
      break;
      case RIGHT_TURN: state = "RIGHT TURN"; 
      break;
      case LEFT_TURN: state = "LEFT TURN"; 
      break;
      case FULL_TURN: state = "FULL TURN"; 
      break;
      case POST_TURN: state = "POST TURN";
      break;
      case ANT_TURN: state = "ANT TURN";
      break;
      case IGNORE_TURN: state = "IGNORE_TURN";
      break;
    }
    SerialBT.print("State: ");
    SerialBT.println(state);
  }
  }
//<---------------------------------------------------------------------------------->//

void setup() 
{
  SerialBT.begin("Bover");
  //Seteo el pin de interrupcion de cada encoder
  attachInterrupt(digitalPinToInterrupt(interruptPinRight),rightEncRead, RISING);
  attachInterrupt(digitalPinToInterrupt(interruptPinLeft),leftEncRead, RISING);
  pinMode(2, OUTPUT);
}

void loop() 
{
  frontDistance = SharpFront->SharpDist();
  rightDistance = SharpRigh->SharpDist();
  leftDistance = SharpLeft->SharpDist();
  float input = rightDistance - leftDistance;
  PID1 = engine->ComputePid(input);
  MovementLogic();
  
  if(DEBUG_STATUS) printStatus();
  if(DEBUG_SENSORS) printSensors();
  if(DEBUG_PID) printPID();
}
